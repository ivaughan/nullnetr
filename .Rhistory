colnames(obs.data)[2:11] <- c("Res.1", "Res.2", "Res.3", "Res.4", "Res.5",
"Res.6", "Res.7", "Res.8", "Res.9", "Res.10")
s.1 <- list()
s.1$obs.interactions <- obs.data
s.1$rand.data <- nm.data
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
expect_warning(bipartite_stats(s.1, index.type = "networklevel", indices = "ALL",
prog.count = FALSE))
bipartite_stats(s.1, index.type = "networklevel", indices = "ALL",
prog.count = FALSE)
library(nullnetr)
nm.data <- read.csv(system.file("testdata", "sim_data.csv", package = "nullnetr"))
obs.data <- data.frame(Consumer = c("A", "B"), matrix(c(10, 5, 10, 5, 10, 5, 10,
5, 10, 5,  5, 0, 5, 0, 5, 0, 5, 0, 5, 0), ncol = 10,
byrow = TRUE))
colnames(obs.data)[2:11] <- c("Res.1", "Res.2", "Res.3", "Res.4", "Res.5",
"Res.6", "Res.7", "Res.8", "Res.9", "Res.10")
s.1 <- list()
s.1$obs.interactions <- obs.data
s.1$rand.data <- nm.data
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
bipartite_stats(s.1, index.type = "specieslevel", indices = "ALL",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "grouplevel", indices = "ALL",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "networklevel", indices = "ALL",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "specieslevel",
indices = "degree distribution")
bipartite_stats(s.1, index.type = "networklevel",
indices = "topology")
library(nullnetr)
nm.data <- read.csv(system.file("testdata", "sim_data.csv", package = "nullnetr"))
obs.data <- data.frame(Consumer = c("A", "B"), matrix(c(10, 5, 10, 5, 10, 5, 10,
5, 10, 5,  5, 0, 5, 0, 5, 0, 5, 0, 5, 0), ncol = 10,
byrow = TRUE))
colnames(obs.data)[2:11] <- c("Res.1", "Res.2", "Res.3", "Res.4", "Res.5",
"Res.6", "Res.7", "Res.8", "Res.9", "Res.10")
s.1 <- list()
s.1$obs.interactions <- obs.data
s.1$rand.data <- nm.data
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
bipartite_stats(s.1, index.type = "specieslevel",
indices = "degree distribution")
bipartite_stats(s.1, index.type = "networklevel",
indices = "topology")
library(nullnetr)
nm.data <- read.csv(system.file("testdata", "sim_data.csv", package = "nullnetr"))
obs.data <- data.frame(Consumer = c("A", "B"), matrix(c(10, 5, 10, 5, 10, 5, 10,
5, 10, 5,  5, 0, 5, 0, 5, 0, 5, 0, 5, 0), ncol = 10,
byrow = TRUE))
colnames(obs.data)[2:11] <- c("Res.1", "Res.2", "Res.3", "Res.4", "Res.5",
"Res.6", "Res.7", "Res.8", "Res.9", "Res.10")
s.1 <- list()
s.1$obs.interactions <- obs.data
s.1$rand.data <- nm.data
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
bipartite_stats(s.1, index.type = "networklevel",
indices = "topology")
nm.data <- read.csv(system.file("testdata", "sim_data.csv", package = "nullnetr"))
obs.data <- data.frame(Consumer = c("A", "B"),
matrix(c(10, 5, 10, 5, 10, 5, 10, 5, 10, 5,  5, 0, 5, 0,
5, 0, 5, 0, 5, 0), ncol = 10, byrow = TRUE))
colnames(obs.data)[2:11] <- c("Res.1", "Res.2", "Res.3", "Res.4", "Res.5",
"Res.6", "Res.7", "Res.8", "Res.9", "Res.10")
s.1 <- list()
s.1$obs.interactions <- obs.data
s.1$rand.data <- nm.data
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
library(testthat)
?expect_equal_to_reference
library(nullnetr)
obs.data <- data.frame(Consumer = c("A", "B"),
matrix(c(10, 5, 10, 5, 10, 5, 10, 5, 10, 5,  5, 0, 5, 0,
5, 0, 5, 0, 5, 0), ncol = 10, byrow = TRUE))
colnames(obs.data)[2:11] <- c("Res.1", "Res.2", "Res.3", "Res.4", "Res.5",
"Res.6", "Res.7", "Res.8", "Res.9", "Res.10")
write.csv(obs.data, "C:/R/Out.csv")
library(nullnetr)
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
generate_edgelist(s.1)
generate_edgelist(s.1, signif.level = 0)
generate_edgelist(s.1, signif.level = -.10)
generate_edgelist(s.1, signif.level = .9)
generate_edgelist(s.1, signif.level = .99)
generate_edgelist(s.1, signif.level = .95)
generate_edgelist(s.1, signif.level = 0.95)
generate_edgelist(s.1, signif.level = 0.95, edge.cols = c("#67A9CF", "#F7F7F7", "#EF8A62"))
generate_edgelist(s.1, signif.level = 0.95, edge.cols = c("##E9A3C9", "#F7F7F7", "#A1D76A"))
generate_edgelist(s.1, signif.level = 0.95, export.null = TRUE)
library(nullnetr)
bipartite_stats(s.1, index.type = "specieslevel",
indices = "ALLBUTD",
prog.count = FALSE)
library(testthat)
bipartite_stats(s.1, index.type = "grouplevel",
indices = "ALLBUTDD",
prog.count = FALSE
)
expect_equal_to_reference(bipartite_stats(s.1, index.type = "grouplevel",
indices = "ALLBUTDD",
prog.count = FALSE), "gl_test")
expect_equal_to_reference(bipartite_stats(s.1, index.type = "networklevel",
indices = "ALLBUTDD",
prog.count = FALSE), "nl_test")
library(nullnetr)
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
plot_bipartite(s.1)
plot_bipartite(s.1, signif.level = 0.95)
plot_bipartite(s.1, signif.level = 0.99)
plot_bipartite(s.1, signif.level = 0.95)
plot_bipartite(s.1, signif.level = 0.9)
plot_bipartite(s.1, signif.level = 0.95)
plot_bipartite(s.1, signif.level = 0.95, method = "normal")
plot_bipartite(s.1, signif.level = 0.95, empty = TRUE)
plot_bipartite(s.1, signif.level = 0.95, empty = FALSE)
plot_bipartite(s.1, signif.level = 0.95, labsize = 2)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 2)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = .8)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.2)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.2,
y.width.low = .2)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.2,
y.width.low = .2, y.width.high = .2, arrow = "up")
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up")
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up", col.high = "grey")
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up",
col.high = "grey", low.lablength = 3)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up",
col.high = "grey", low.lablength = 3, text.rot = 90)
spp.ord <- list()
spp.ord$seq.high <- c("B", "A")
spp.ord$seq.low <- c("Res.2", "Res.1", "Res.3", "Res.4", "Res.5", "Res.6",
"Res.7", "Res.8", "Res.9", "Res.10")
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up",
col.high = "grey", #low.lablength = 3,
sequence = spp.ord, text.rot = 90)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up",
col.high = "grey", #low.lablength = 3,
#sequence = spp.ord,
text.rot = 90)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up",
col.high = "grey", #low.lablength = 3,
sequence = spp.ord,
text.rot = 90)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up",
col.high = "grey", #low.lablength = 3,
#sequence = spp.ord,
text.rot = 90)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up",
col.high = "grey", #low.lablength = 3,
sequence = spp.ord,
text.rot = 90)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up",
col.high = "grey", #low.lablength = 3,
#sequence = spp.ord,
text.rot = 90)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up",
col.high = "grey", #low.lablength = 3,
sequence = spp.ord,
text.rot = 90)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up",
col.high = "grey", low.lablength = 3,
sequence = spp.ord, text.rot = 90)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up",
col.high = "grey", sequence = spp.ord, text.rot = 90)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, #ybig = 1.1,
y.width.low = .2, y.width.high = .2, arrow = "up",
col.high = "grey", sequence = spp.ord, text.rot = 90)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .1, y.width.high = .2, arrow = "up",
col.high = "grey", sequence = spp.ord, text.rot = 90)
plot_bipartite(s.1, signif.level = 0.95, labsize = 1.2, ybig = 1.1,
y.width.low = .05, y.width.high = .2, arrow = "up",
col.high = "grey", sequence = spp.ord, text.rot = 90)
vdiffr::manage_cases(".")
plot_bipartite(s.1, signif.level = 0.95,
edge.cols = c("#E9A3C9", "#F7F7F7", "#A1D76A"))
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
library(nullnetr)
bipartite_stats(s.1, index.type = "specieslevel",
indices = "degree",
prog.count = FALSE)
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
bipartite_stats(s.1, index.type = "specieslevel",
indices = "degree",
prog.count = FALSE)
expect_equal_to_reference(bipartite_stats(s.1, index.type = "specieslevel",
indices = "degree",
prog.count = FALSE), "stat_test")
expect_equal_to_reference(bipartite_stats(s.1, index.type = "specieslevel",
indices = "degree",
prog.count = FALSE), "stat_test")
expect_equal_to_reference(bipartite_stats(s.1, index.type = "specieslevel",
indices = "degree",
prog.count = FALSE), "stat_test")
expect_equal_to_reference(bipartite_stats(s.1, index.type = "specieslevel",
indices = "species strength",
prog.count = FALSE), "stat_test")
bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score"),
prog.count = FALSE))
bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score"),
prog.count = FALSE)
warnings()
library(nullnetr)
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
bipartite_stats(s.1, index.type = "specieslevel",
indices = "degree distribution")
bipartite_stats(s.1, index.type = "specieslevel",
indices = "ALL", prog.count = FALSE)
bipartite_stats(s.1, index.type = "grouplevel", indices = "ALL",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "networklevel",
indices = "topology")
bipartite_stats(s.1, index.type = "networklevel", indices = "ALL",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score"),
prog.count = FALSE)
library(nullnetr)
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
bipartite_stats(s.1, signif.level = 1.1,
index.type = "specieslevel",
indices = "degree")
bipartite_stats(s.1, index.type = "specieslevel",
indices = "degree distribution")
bipartite_stats(s.1, index.type = "specieslevel",
indices = "ALL", prog.count = FALSE)
bipartite_stats(s.1, index.type = "grouplevel", indices = "ALL",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "networklevel",
indices = "topology")
bipartite_stats(s.1, index.type = "networklevel", indices = "ALL",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "specieslevel",
indices = "ALLBUTD",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "grouplevel",
indices = "ALLBUTDD",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "networklevel",
indices = "ALLBUTDD",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score"),
prog.count = FALSE)
expect_equal_to_reference(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score"),
prog.count = FALSE), "stat_test")
expect_equal_to_reference(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score"),
prog.count = FALSE), "stat_test")
expect_equal_to_reference(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability"),
prog.count = FALSE), "stat_test")
expect_equal_to_reference(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE), "stat_test")
expect_equal_to_reference(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE), "stat_test")
bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE)
write.csv(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE), "C:/R/Out.csv")
write.csv(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE), "C:/R/Out.csv")
set.seed(123)
write.csv(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE), "C:/R/Out.csv")
set.seed(123)
write.csv(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE), "C:/R/Out.csv")
library(nullnetr)
?skip_on_cran
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
plot_preferences(s.1, node = "A", signif.level = 1.1)
plot_preferences(s.1, node = "A", signif.level = .95)
plot_preferences(s.1, node = "A", bar.type = "height")
plot_preferences(s.1, node = "A", bar.type = "counts")
plot_preferences(s.1, node = "A", bar.type = "SES")
plot_preferences(s.1, node = "A", res.order = ro[-1, ])
ro <- read.csv(system.file("testdata", "df1_res_order.csv", package = "nullnetr"))
ro.err1 <- read.csv(system.file("testdata", "df1_res_order_error.csv",
package = "nullnetr"))
plot_preferences(s.1, node = "A", res.order = ro)
plot_preferences(s.1, node = "A", signif.level = 0.95,
bar.colours = c("#998EC3", "#F7F7F7",
"#F1A340"), bar.type = "counts")
plot_preferences(s.1, node = "B", signif.level = 0.95,
bar.colours = c("#998EC3", "#F7F7F7",
"#F1A340"), bar.type = "counts")
plot_preferences(s.1, node = "A", bar.colours = c("#998EC3",
"#F7F7F7", "#F1A340"), bar.type = "SES")
lot_preferences(s.1, node = "B", bar.colours = c("#998EC3",
"#F7F7F7", "#F1A340"), bar.type = "SES")
plot_preferences(s.1, node = "B", bar.colours = c("#998EC3",
"#F7F7F7", "#F1A340"), bar.type = "SES")
library(nullnetr)
library(nullnetr)
c.1 <- read.csv(system.file("testdata", "df1_cons.csv", package = "nullnetr"))
r.1 <- read.csv(system.file("testdata", "df1_res.csv", package = "nullnetr"))
t2 <- test_interactions(generate_null_net(c.1, r.1, sims = 100,
r.weights = fbls.1,
prog.count = FALSE))
fbls.1 <- read.csv(system.file("testdata", "df1_fbls.csv",
package = "nullnetr"))
t2 <- test_interactions(generate_null_net(c.1, r.1, sims = 100,
r.weights = fbls.1,
prog.count = FALSE))
t2
sum(is.na(t2[t2$Resource == "Prey.1" || t2$Resource == "Prey.3",
"SES"]))
sum(t1[t1$Resource == "Res.3", "Observed"])
t1 <- test_interactions(generate_null_net(c.3, r.1, sims = 100,
prog.count = FALSE))
c.3 <- read.csv(system.file("testdata", "df1_cons_one_res_zero.csv",
package = "nullnetr"))
t2 <- test_interactions(generate_null_net(c.1, r.1, sims = 100,
r.weights = fbls.1,
prog.count = FALSE))
t1 <- test_interactions(generate_null_net(c.3, r.1, sims = 100,
prog.count = FALSE))
sum(t1[t1$Resource == "Res.3", "Observed"])
sum(is.na(t2[t2$Resource == "Res.1" || t2$Resource == "Res.3",
"SES"]))
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
?devtools::install
library(nullnetr)
library(nullnetr)
?Sys.setenv
?expect_doppelganger
library(nullnetr)
library(nullnetr)
?file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
load("~/nullnetr/.RData")
