prog.count = FALSE)
bipartite_stats(s.1, index.type = "networklevel",
indices = "topology")
bipartite_stats(s.1, index.type = "networklevel", indices = "ALL",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score"),
prog.count = FALSE)
library(nullnetr)
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
bipartite_stats(s.1, signif.level = 1.1,
index.type = "specieslevel",
indices = "degree")
bipartite_stats(s.1, index.type = "specieslevel",
indices = "degree distribution")
bipartite_stats(s.1, index.type = "specieslevel",
indices = "ALL", prog.count = FALSE)
bipartite_stats(s.1, index.type = "grouplevel", indices = "ALL",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "networklevel",
indices = "topology")
bipartite_stats(s.1, index.type = "networklevel", indices = "ALL",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "specieslevel",
indices = "ALLBUTD",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "grouplevel",
indices = "ALLBUTDD",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "networklevel",
indices = "ALLBUTDD",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score"),
prog.count = FALSE)
expect_equal_to_reference(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score"),
prog.count = FALSE), "stat_test")
expect_equal_to_reference(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score"),
prog.count = FALSE), "stat_test")
expect_equal_to_reference(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability"),
prog.count = FALSE), "stat_test")
expect_equal_to_reference(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE), "stat_test")
expect_equal_to_reference(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE), "stat_test")
bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE)
write.csv(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE), "C:/R/Out.csv")
write.csv(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE), "C:/R/Out.csv")
set.seed(123)
write.csv(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE), "C:/R/Out.csv")
set.seed(123)
write.csv(bipartite_stats(s.1, index.type = "grouplevel",
indices = c("number of species",
"mean number of links",
"mean number of shared partners",
"cluster coefficient",
"weighted cluster coefficient",
"togetherness", "C score", "V score",
"discrepancy", "extinction slope",
"robustness", "niche overlap",
"generality", "vulnerability",
"partner diversity", "fc"),
prog.count = FALSE), "C:/R/Out.csv")
library(nullnetr)
?skip_on_cran
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
plot_preferences(s.1, node = "A", signif.level = 1.1)
plot_preferences(s.1, node = "A", signif.level = .95)
plot_preferences(s.1, node = "A", bar.type = "height")
plot_preferences(s.1, node = "A", bar.type = "counts")
plot_preferences(s.1, node = "A", bar.type = "SES")
plot_preferences(s.1, node = "A", res.order = ro[-1, ])
ro <- read.csv(system.file("testdata", "df1_res_order.csv", package = "nullnetr"))
ro.err1 <- read.csv(system.file("testdata", "df1_res_order_error.csv",
package = "nullnetr"))
plot_preferences(s.1, node = "A", res.order = ro)
plot_preferences(s.1, node = "A", signif.level = 0.95,
bar.colours = c("#998EC3", "#F7F7F7",
"#F1A340"), bar.type = "counts")
plot_preferences(s.1, node = "B", signif.level = 0.95,
bar.colours = c("#998EC3", "#F7F7F7",
"#F1A340"), bar.type = "counts")
plot_preferences(s.1, node = "A", bar.colours = c("#998EC3",
"#F7F7F7", "#F1A340"), bar.type = "SES")
lot_preferences(s.1, node = "B", bar.colours = c("#998EC3",
"#F7F7F7", "#F1A340"), bar.type = "SES")
plot_preferences(s.1, node = "B", bar.colours = c("#998EC3",
"#F7F7F7", "#F1A340"), bar.type = "SES")
library(nullnetr)
library(nullnetr)
c.1 <- read.csv(system.file("testdata", "df1_cons.csv", package = "nullnetr"))
r.1 <- read.csv(system.file("testdata", "df1_res.csv", package = "nullnetr"))
t2 <- test_interactions(generate_null_net(c.1, r.1, sims = 100,
r.weights = fbls.1,
prog.count = FALSE))
fbls.1 <- read.csv(system.file("testdata", "df1_fbls.csv",
package = "nullnetr"))
t2 <- test_interactions(generate_null_net(c.1, r.1, sims = 100,
r.weights = fbls.1,
prog.count = FALSE))
t2
sum(is.na(t2[t2$Resource == "Prey.1" || t2$Resource == "Prey.3",
"SES"]))
sum(t1[t1$Resource == "Res.3", "Observed"])
t1 <- test_interactions(generate_null_net(c.3, r.1, sims = 100,
prog.count = FALSE))
c.3 <- read.csv(system.file("testdata", "df1_cons_one_res_zero.csv",
package = "nullnetr"))
t2 <- test_interactions(generate_null_net(c.1, r.1, sims = 100,
r.weights = fbls.1,
prog.count = FALSE))
t1 <- test_interactions(generate_null_net(c.3, r.1, sims = 100,
prog.count = FALSE))
sum(t1[t1$Resource == "Res.3", "Observed"])
sum(is.na(t2[t2$Resource == "Res.1" || t2$Resource == "Res.3",
"SES"]))
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
?devtools::install
library(nullnetr)
library(nullnetr)
?Sys.setenv
?expect_doppelganger
library(nullnetr)
library(nullnetr)
?file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
load("~/nullnetr/.RData")
devtools::use_readme_rmd()
library(nullnetr)
set.seed(1234)
sil.null <- generate_null_net(Silene[, 2:7], Silene.plants[, 2:6], sims = 10,
c.samples = Silene[, 1],
r.samples = Silene.plants[, 1], prog.count = FALSE)
bipartite_stats(sil.null, index.type = "networklevel",
indices = c("linkage density",
"weighted connectance", "interaction evenness"),
intereven = "sum", prog.count = FALSE)
?WelshStreams
stream.1 <- generate_null_net(WelshStreams[, 2:18], WelshStreams.prey[, 2:17],
sims = 10, data.type = "names",
summary.type = "sum",
c.samples = WelshStreams[,1],
r.samples = WelshStreams.prey[,1],
r.weights = WelshStreams.fl)
set.seed(1234)
sil.null <- generate_null_net(Silene[, 2:7], Silene.plants[, 2:6], sims = 10,
c.samples = Silene[, 1],
r.samples = Silene.plants[, 1], prog.count = FALSE)
bipartite_stats(stream.1, index.type = "networklevel",
indices = c("linkage density", "weighted connectance",
"interaction evenness"), intereven = "sum",
prog.count = FALSE)
bipartite_stats(sil.null, index.type = "networklevel",
indices = c("linkage density", "weighted connectance",
"interaction evenness"), intereven = "sum",
prog.count = FALSE)
test_interactions(sil.null, 0.95)
nrow(test_interactions(sil.null, 0.95))
?options
library(devtools)
?build_vignettes
?install_github
library(nullnetr)
library(nullnetr)
?generate_null_net
null.1 <- generate_null_net(Silene[, 2:7], Silene.plants[, 2:6], sims = 10,
data.type = "names", summary.type = "sum", c.samples = Silene[, 1],
r.samples = Silene.plants[, 1])
nullnet <- null.1
signif.level <- .95
edge.cols <- c("#67A9CF", "#F7F7F7", "#EF8A62")
p <- (1 - signif.level) / 2
obs.web <- nullnet$obs.interactions
rownames(obs.web) <- obs.web[, 1]
obs.web <- obs.web[, -1]
obs.web <- t(obs.web)
obs.web
null.mean <- stats::aggregate(nullnet$rand.data[, 3:ncol(nullnet$rand.data)],
list(nullnet$rand.data$Consumer), mean)
rownames(null.mean) <- null.mean[,1 ]; null.mean <- null.mean[, -1]
null.mean <- t(null.mean)
null.upp <- stats::aggregate(nullnet$rand.data[, 3:ncol(nullnet$rand.data)],
list(nullnet$rand.data$Consumer), stats::quantile,
probs = 1 - p)
rownames(null.upp) <- null.upp[,1 ]; null.upp<- null.upp[, -1]
null.upp<- t(null.upp)
null.low <- stats::aggregate(nullnet$rand.data[, 3:ncol(nullnet$rand.data)],
list(nullnet$rand.data$Consumer), stats::quantile,
probs = p)
rownames(null.low) <- null.low[,1 ]; null.low <- null.low[, -1]
null.low <- t(null.low)
null.mean <- null.mean[match(rownames(obs.web), rownames(null.mean)), ]
null.upp <- null.upp[match(rownames(obs.web), rownames(null.upp)), ]
null.low <- null.low[match(rownames(obs.web), rownames(null.low)), ]
null.low
n.consumers <- ncol(obs.web)
n.resources <- nrow(obs.web)
select.vector <- matrix(rep(edge.cols[2],length = n.consumers * n.resources),
ncol = n.consumers, nrow = n.resources)
select.vector <- ifelse(obs.web > null.upp, edge.cols[3],
ifelse(obs.web < null.low, edge.cols[1], select.vector))
select.vector <- as.vector(t(select.vector))
select.vector
test_interactions(null.1)
length(select.vector)
ncol(obs.web)
nrow(obs.web)
nrow(test_interactions(null.1))
null.upp
plotweb
library(bipartite)
plotweb
dim(obs.web)
set.seed(1234)
sil.null <- generate_null_net(Silene[, 2:7], Silene.plants[, 2:6], sims = 10,
c.samples = Silene[, 1],
r.samples = Silene.plants[, 1])
library(nullnetr)
set.seed(1234)
sil.null <- generate_null_net(Silene[, 2:7], Silene.plants[, 2:6], sims = 10,
c.samples = Silene[, 1],
r.samples = Silene.plants[, 1])
nullnet<-sil.null
signif.level<-.95
edge.cols <- c("#67A9CF", "#F7F7F7", "#EF8A62")
p <- (1 - signif.level) / 2
obs.web <- nullnet$obs.interactions
rownames(obs.web) <- obs.web[, 1]
obs.web <- obs.web[, -1]
obs.web <- t(obs.web)
obs.web
null.mean <- stats::aggregate(nullnet$rand.data[, 3:ncol(nullnet$rand.data)],
list(nullnet$rand.data$Consumer), mean)
rownames(null.mean) <- null.mean[,1 ]; null.mean <- null.mean[, -1]
null.mean <- t(null.mean)
null.upp <- stats::aggregate(nullnet$rand.data[, 3:ncol(nullnet$rand.data)],
list(nullnet$rand.data$Consumer), stats::quantile,
probs = 1 - p)
rownames(null.upp) <- null.upp[,1 ]; null.upp<- null.upp[, -1]
null.upp<- t(null.upp)
null.low <- stats::aggregate(nullnet$rand.data[, 3:ncol(nullnet$rand.data)],
list(nullnet$rand.data$Consumer), stats::quantile,
probs = p)
rownames(null.low) <- null.low[,1 ]; null.low <- null.low[, -1]
null.low <- t(null.low)
null.low
n.consumers <- ncol(obs.web)
n.resources <- nrow(obs.web)
select.vector <- matrix(rep(edge.cols[2],length = n.consumers * n.resources),
ncol = n.consumers, nrow = n.resources)
select.vector <- ifelse(obs.web > null.upp, edge.cols[3],
ifelse(obs.web < null.low, edge.cols[1], select.vector))
select.vector <- as.vector(t(select.vector))
select.vector
n.consumers <- ncol(obs.web)
n.resources <- nrow(obs.web)
select.vector <- matrix(rep(edge.cols[2],length = n.consumers * n.resources),
ncol = n.consumers, nrow = n.resources)
select.vector <- ifelse(obs.web > null.upp, edge.cols[3],
ifelse(obs.web < null.low, edge.cols[1], select.vector))
select.vector
library(nullnetr)
con1 <- read.csv(system.file("testdata", "df1_cons_zero_cons.csv",
package = "nullnetr"))
summary(con1)
res1 <- read.csv(system.file("testdata", "df1_res_zero_res.csv",
package = "nullnetr"))
res1
c.1 <- read.csv(system.file("testdata", "df1_cons_zero_cons.csv",
package = "nullnetr"))
r.1 <- read.csv(system.file("testdata", "df1_res_zero_res.csv",
package = "nullnetr"))
set.seed(1234)
n.1 <- generate_null_net(c.1, r.1, sims = 100, prog.count = FALSE)
plot_bipartite(n.1)
test_interactions(n.1)
library(nullnetr)
library(nullnetr)
c.1 <- read.csv(system.file("testdata", "df1_cons_zero_cons.csv",
package = "nullnetr"))
r.1 <- read.csv(system.file("testdata", "df1_res_zero_res.csv",
package = "nullnetr"))
set.seed(1234)
n.1 <- generate_null_net(c.1, r.1, sims = 100, prog.count = FALSE)
plot_bipartite(n.1)
test_interactions(n.1)
c.1 <- read.csv(system.file("testdata", "df4_cons_zero_res.csv",
package = "nullnetr"))
select.vector
obs.web
solSums(obs.web)
colSums(obs.web)
rowSums(obs.web)
library(nullnetr)
c.1 <- read.csv(system.file("testdata", "df4_cons_zero_res.csv",
package = "nullnetr"))
c.2 <- read.csv(system.file("testdata", "df4_cons_zero_cons.csv",
package = "nullnetr"))
r.1 <- read.csv(system.file("testdata", "df1_res.csv",
package = "nullnetr"))
r.2 <- read.csv(system.file("testdata", "df4_res_zero_res.csv",
package = "nullnetr"))
set.seed(1234)
n.1 <- generate_null_net(c.1, r.1, sims = 100, prog.count = FALSE)
n.2 <- generate_null_net(c.2, r.1, sims = 100, prog.count = FALSE)
n.3 <- generate_null_net(c.1, r.2, sims = 100, prog.count = FALSE)
plot_bipartite(n.1)
plot_bipartite(n.2)
plot_bipartite(n.3)
test_interactions(n.3)
plot_bipartite(n.2)
plot_bipartite(n.3)
plot_bipartite(n.2)
test_interactions(n.2)
test_interactions(n.2)
plot_bipartite(n.2)
test_interactions(n.1)
plot_bipartite(n.1)
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
library(nullnetr)
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
expect_error(bipartite_stats(s.1, signif.level = 1.1,
index.type = "specieslevel",
indices = "degree"))
bipartite_stats(s.1, signif.level = 1.1,
index.type = "specieslevel",
indices = "degree")
bipartite_stats(s.1, index.type = "specieslevel",
indices = "degree distribution")
bipartite_stats(s.1, index.type = "specieslevel",
indices = "ALL", prog.count = FALSE)
bipartite_stats(s.1, index.type = "grouplevel",
indices = "ALL", prog.count = FALSE)
bipartite_stats(s.1, index.type = "networklevel",
indices = "topology")
bipartite_stats(s.1, index.type = "networklevel",
indices = "ALL", prog.count = FALSE)
set.seed(123)
expect_equal_to_reference(bipartite_stats(s.1, index.type = "specieslevel",
indices = "ALLBUTD",
prog.count = FALSE), "sl_test")
bipartite_stats(s.1, index.type = "specieslevel",
indices = "ALLBUTD",
prog.count = FALSE)
bipartite_stats(s.1, index.type = "grouplevel",
indices = "ALLBUTDD",
prog.count = FALSE)
write.csv(bipartite_stats(s.1, index.type = "grouplevel",
indices = "ALLBUTDD",
prog.count = FALSE), "C:/R/Out.csv")
write.csv(bipartite_stats(s.1, index.type = "grouplevel",
indices = "ALLBUTDD",
prog.count = FALSE), "C:/R/Out.csv")
?is.na
?vdiffr
libraryNvdiffr)
library(vdiffr)
?vdiffr
?expect_equal_to_reference
?testthat
readRDS("gl_test")
readRDS("C:/R/gl_test")
write.csv(readRDS("C:/R/gl_test"), "C:/R/Out.csv")
readRDS(file.choose())
readRDS(file.choose(), "C:/R/spp_lev.csv")
write.csv(readRDS(file.choose()), "C:/R/spp_lev.csv")
bipartite_stats(s.1, index.type = "specieslevel",
indices = "ALLBUTD",
prog.count = FALSE)
write.csv(readRDS(file.choose()), "C:/R/grp_lev.csv")
write.csv(readRDS(file.choose()), "C:/R/grp_lev.csv")
write.csv(readRDS(file.choose()), "C:/R/net_lev.csv")
write.csv(bipartite_stats(s.1, index.type = "grouplevel",
indices = "ALLBUTDD", prog.count = FALSE), "C:/R/grp_lev_new.csv")
write.csv(bipartite_stats(s.1, index.type = networklevel
indices = "ALLBUTDD", prog.count = FALSE), "C:/R/net_lev_new.csv")
write.csv(bipartite_stats(s.1, index.type = "networklevel",
indices = "ALLBUTDD", prog.count = FALSE), "C:/R/net_lev_new.csv")
?bipartite
versionlog()
bipartite_stats(s.1, index.type = "specieslevel",
indices = "ALLBUTD",
prog.count = FALSE)
library(nullnetr)
library(nullnetr)
library(nullnetr)
library(nullnetr)
