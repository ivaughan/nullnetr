stop("Names in 'res.order' do not match resource names in nullnet object")}
}
# --------------------------------------
# --------------------------------------
# Call test_interactions
ti <- test_interactions(nullnet, signif.level = signif.level)
ti <- ti[ti$Consumer == node, ]
ti[, 3] <- ifelse(rowSums(ti[, 3:6]) == 0, NA, ti[, 3])
ti[, 4] <- ifelse(rowSums(ti[, 3:6]) == 0, NA, ti[, 4])
ti[, 5] <- ifelse(rowSums(ti[, 3:6]) == 0, NA, ti[, 5])
ti[, 6] <- ifelse(rowSums(ti[, 3:6]) == 0, NA, ti[, 6])
# --------------------------------------
# --------------------------------------
# Plot style 1: dotchart
# --------------------------------------
if(style == "dots") {
# Counts with confidence limits
if(type == "counts") {
# Set up maximum x-axis value for xlim. Add an additional 5%
min.x <- min(ti[, 3:6], na.rm = TRUE)
min.x <- max(0, min.x, na.rm = TRUE)
max.x <- max(ti[, 3:6], na.rm = TRUE)
max.x <- max.x * 1.05
ti$Setup <- seq(min.x, max.x, length.out = nrow(ti))
if (is.null(res.order)) {
# Plot built up in 2 stages: i) using min and max values to set the
#   y-axis range without having to use ylim (so this can be customised
#   by the user), ii) the main dbarplot and label, and iii) the error
graphics::dotchart(ti$Setup, labels = ti$Resource, col = 1,
pt.cex = 0, cex = l.cex, main = node, ...)
graphics::abline(v = 0, lty = 2, col = "dimgrey")
for (i in 1:nrow(ti)){
eval(parse(text = paste("lines(x = c(ti$Lower.", signif.level * 100,
".CL[i], ti$Upper.", signif.level * 100,
".CL[i]), y = c(i, i), lwd = lwd)", sep = "")))
if(ti$Test[i] == "Weaker") p.col <- res.col[1]
if(ti$Test[i] == "ns" | is.na(ti$Test[i])) p.col <- res.col[2]
if(ti$Test[i] == "Stronger") p.col <- res.col[3]
graphics::points(ti$Observed[i], i, pch = 21, col = "black",
bg = p.col, cex = p.cex)
}
} else {
colnames(res.order) <- c("Taxon", "Order")
ti <- merge(ti, res.order, by.x = "Resource", by.y = "Taxon")
ti <- ti[order(ti$Order, decreasing = FALSE), ]
graphics::dotchart(ti$Setup, labels = ti$Resource, col = 1,
pt.cex = 0, cex = l.cex, main = node, ...)
graphics::abline(v = 0, lty = 2, col = "dimgrey")
for (i in 1:nrow(ti)){
eval(parse(text = paste("lines(x = c(ti$Lower.", signif.level * 100,
".CL[i], ti$Upper.", signif.level * 100,
".CL[i]), y = c(i, i), lwd = lwd)", sep = "")))
if(ti$Test[i] == "Weaker") p.col <- res.col[1]
if(ti$Test[i] == "ns" | is.na(ti$Test[i])) p.col <- res.col[2]
if(ti$Test[i] == "Stronger") p.col <- res.col[3]
graphics::points(ti$Observed[i], i, pch = 21, col = "black",
bg = p.col, cex = p.cex)
}
}
}
# --------------------------------------
# --------------------------------------
# Plot type 2: Standardised effect sizes with 2 and -2 lines
if(type == "SES") {
# Set up maximum x-axis value for xlim. Add an additional 5%
min.x <- min(ti$SES, na.rm = TRUE)
max.x <- max(ti$SES, na.rm = TRUE)
ran.x <- max(ti$SES, na.rm = TRUE) - min(ti$SES, na.rm = TRUE)
min.x <- min(min.x - (ran.x * 0.05), 0)
max.x <- max.x + (ran.x * 0.05)
ti$Setup <- seq(min.x, max.x, length.out = nrow(ti))
if (is.null(res.order)) {
graphics::dotchart(ti$Setup, labels = ti$Resource, col = 0, ...)
graphics::dotchart(ti$SES, labels = ti$Resource, pch = 16,
col = 1, pt.cex = .1, cex = l.cex, ...)
graphics::abline(v = 2, lty = 2)
graphics::abline(v = 0, lty = 1)
graphics::abline(v = -2, lty = 2)
for (i in 1:nrow(ti)){
if(ti$Test[i] == "Weaker") p.col <- res.col[1]
if(ti$Test[i] == "ns" | is.na(ti$Test[i])) p.col <- res.col[2]
if(ti$Test[i] == "Stronger") p.col <- res.col[3]
graphics::points(ti$SES[i], i, pch = 21, col = "black",
bg = p.col, cex = p.cex)
}
} else {
colnames(res.order) <- c("Taxon", "Order")
ti <- merge(ti, res.order, by.x = "Resource", by.y = "Taxon")
ti <- ti[order(ti$Order, decreasing = FALSE), ]
graphics::dotchart(ti$Setup, labels = ti$Resource, col = 0, ...)
graphics::dotchart(ti$SES, labels = ti$Resource, pch = 16,
col = 1, pt.cex = .1, xlim = c(min.x, max.x), ...)
graphics::abline(v = 2, lty = 2)
graphics::abline(v = 0, lty = 1)
graphics::abline(v = -2, lty = 2)
for (i in 1:nrow(ti)){
if(ti$Test[i] == "Weaker") p.col <- res.col[1]
if(ti$Test[i] == "ns" | is.na(ti$Test[i])) p.col <- res.col[2]
if(ti$Test[i] == "Stronger") p.col <- res.col[3]
graphics::points(ti$SES[i], i, pch = 21, col = "black",
bg = p.col, cex = p.cex)
}
}
}
}
# --------------------------------------
# Plot style 2: barchart
# --------------------------------------
if(style == "bars") {
# Vector of fill colours for the bars.
if(!is.null(res.col)) {
ti$Prefs <- rep(res.col[2], nrow(ti))
for (i in 1:nrow(ti)) {
if (ti$Test[i] == "Stronger") {ti$Prefs[i] <- res.col[3]}
if (ti$Test[i] == "Weaker") {ti$Prefs[i] <- res.col[1] }
}
} else {
ti$Prefs <- rep(0, nrow(ti))
}
# Counts with confidence limits
if(type == "counts") {
# Set up maximum y-axis value for ylim. Add an additional 5%
min.y <- min(ti[, 3:6], na.rm = TRUE)
min.y <- max(0, min.y, na.rm = TRUE)
max.y <- max(ti[, 3:6], na.rm = TRUE)
max.y <- max.y * 1.05
ti$Setup <- seq(min.y, max.y, length.out = nrow(ti))
if (is.null(res.order)) {
# Plot built up in 3 stages: i) uses min and max values to set the
#   y-axis range without having to use ylim (so this can be customised
#   by the user), ii) the main barplot and label, and iii) the error
#   bars using arrows. Warnings surpressed for arrows: warnings are
#   generated when they are of 'zero length' i.e. no confidence interval
bp1 <- graphics::barplot(ti$Setup, names.arg = ti$Resource,
col = 0, border = NA, axisnames = FALSE, ...)
graphics::barplot(ti$Observed, names.arg = ti$Resource, las = 3,
main = node, col = ti$Prefs, add = TRUE, ...)
arrow.cols <- ifelse((ti[, 5] - ti[, 6]) == 0, NA, "black")
graphics::arrows(bp1, ti[, 5], bp1, ti[, 6], lwd = 2,
col = arrow.cols, code = 3, angle = 90, length = .05)
} else {
colnames(res.order) <- c("Taxon", "Order")
ti <- merge(ti, res.order, by.x = "Resource", by.y = "Taxon")
ti <- ti[order(ti$Order, decreasing = FALSE), ]
bp1 <- graphics::barplot(ti$Setup, names.arg = ti$Resource,
col = 0, border = NA, axisnames = FALSE, ...)
graphics::barplot(ti$Observed, names.arg = ti$Resource,
las = 3, main = node, col = ti$Prefs, add = TRUE, ...)
arrow.cols <- ifelse((ti[, 5] - ti[, 6]) == 0, NA, "black")
graphics::arrows(bp1, ti[, 5], bp1, ti[, 6], lwd = 2,
col = arrow.cols, code = 3, angle = 90, length = .05)
}
}
# --------------------------------------
# --------------------------------------
# Plot type 2: Standardised effect sizes with 2 and -2 lines
if(type == "SES") {
min.y <- min(ti$SES, na.rm = TRUE)
max.y <- max(ti$SES, na.rm = TRUE)
ran.y <- max(ti$SES, na.rm = TRUE) - min(ti$SES, na.rm = TRUE)
min.y <- min(min.y - (ran.y * 0.05), 0)
max.y <- max.y + (ran.y * 0.05)
ti$Setup <- seq(min.y, max.y, length.out = nrow(ti))
if (is.null(res.order)) {
bp1 <- graphics::barplot(ti$Setup, names.arg = ti$Resource, col = 0,
border = NA, axisnames = FALSE, ...)
graphics::barplot(ti$SES, names.arg = ti$Resource, las = 3,
add = TRUE, main = node, col = ti$Prefs, ...)
graphics::abline(h = 2, lty = 2)
graphics::abline(h = -2, lty = 2)
} else {
colnames(res.order) <- c("Taxon", "Order")
ti <- merge(ti, res.order, by.x = "Resource", by.y = "Taxon")
ti <- ti[order(ti$Order, decreasing = FALSE), ]
bp1 <- graphics::barplot(ti$Setup, names.arg = ti$Resource, col = 0,
border = NA, axisnames = FALSE, ...)
graphics::barplot(ti$SES, names.arg = ti$Resource, las = 3, add = TRUE,
main = node, col = ti$Prefs, ...)
graphics::abline(h = 2, lty = 2)
graphics::abline(h = 0, lty = 1)
graphics::abline(h = -2, lty = 2)
}
}
}
}
warnings()
plot_preferences(null.1, "Dinocras", signif.level = 0.95,
type = "counts", ylab = "Num. of visits")
plot_preferences(null.1, "Dinocras", signif.level = 0.95,
type = "counts", xlab = "Num. of visits")
plot_preferences(null.1, "Dinocras", signif.level = 0.95, type = "counts",
xlab = "Num. of visits", lwd = 2)
plot_preferences(null.1, "Dinocras", signif.level = 0.95, type = "counts",
xlab = "Num. of visits", p.cex = 1.2, lwd = 2)
plot_preferences(null.1, "Rhyacophila", signif.level = 0.95,
type = "SES", xlab = "SES")
plot_preferences(null.1, "Rhyacophila", signif.level = 0.95, style = "bars",
bar.type = "SES", ylab = "SES")
plot_preferences(null.1, "Rhyacophila", signif.level = 0.95, style = "bars",
type = "SES", ylab = "SES")
plot_preferences(null.1, "Rhyacophila", signif.level = 0.95, style = "bars",
type = "SES", ylab = "SES")
library(readr)
cons <- read_csv("C:/R/df1_cons_q.csv")
class(cons)
summary(cons)
library(nullnetr)
?plot_preferences
devtools::load_all(".")
?plot_preferences
library(nullnetr)
?plot_preferences
library(nullnetr)
library(nullnetr)
?plot_preferences
library(nullnetr)
library(nullnetr)
?plot_preferences
null.1 <- generate_null_net(WelshStreams[, 2:18], WelshStreams.prey[, 2:17],
sims = 10, c.samples = WelshStreams[, 1],
r.samples = WelshStreams.prey[, 1])
plot_preferences(null.1, "Dinocras", signif.level = 0.95, type = "counts",
xlab = "Num. of visits", p.cex = 1.2, lwd = 2)
plot_preferences(null.1, "Dinocras", style = "bars", signif.level = 0.95,
type = "counts", xlab = "Num. of visits")
plot_preferences(null.1, "Dinocras", signif.level = 0.95, type = "counts",
xlab = "Num. of visits", p.cex = 1.2, lwd = 2)
plot_preferences(null.1, "Rhyacophila", signif.level = 0.95,
type = "SES", xlab = "SES")
plot_preferences(null.1, "Rhyacophila", signif.level = 0.95, style = "bars",
type = "SES", ylab = "SES")
library(nullnetr)
library(nullnetr)
null.1 <- generate_null_net(Silene[, 2:7], Silene.plants[, 2:6], sims = 10,
data.type = "names", summary.type = "sum", c.samples = Silene[, 1],
r.samples = Silene.plants[, 1])
library(nullnetr)
vdiffr::manage_cases(".")
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
plot_preferences(s.1, node = "A", signif.level = 0.95,
style = "dots", type = "counts")
plot_preferences(s.1, node = "B", signif.level = 0.95,
style = "dots", type = "counts")
plot_preferences(s.1, node = "A", style = "dots",
type = "SES")
plot_preferences(s.1, node = "B", style = "dots",
type = "SES")
plot_preferences(s.1, node = "A", signif.level = 0.95,
style = "bars", type = "counts")
plot_preferences(s.1, node = "B", signif.level = 0.95,
style = "bars", type = "counts")
plot_preferences(s.1, node = "A", style = "bars",
type = "SES")
plot_preferences(s.1, node = "B", style = "bars",
type = "SES")
plot_preferences(s.1, node = "A", style = "dots",
type = "SES")
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
ro <- read.csv(system.file("testdata", "df1_res_order.csv", package = "nullnetr"))
ro.err1 <- read.csv(system.file("testdata", "df1_res_order_error.csv",
package = "nullnetr"))
plot_preferences(s.1, node = "A", style = "dots",
type = "SES")
library(nullnetr)
plot_preferences(s.1, node = "A", style = "dots",
type = "SES")
vdiffr::manage_cases(".")
plot_preferences(s.1, node = "A", signif.level = 1.1)
plot_preferences(s.1, node = "A", type = "height")
plot_preferences(s.1, node = "A", res.order = ro[-1, ])
plot_preferences(s.1, node = "A", res.order = ro.err1)
vdiffr::expect_doppelganger("Plot prefs dots A 0.95", pl1)
pl1 <- function() plot_preferences(s.1, node = "A", signif.level = 0.95,
style = "dots", type = "counts")
vdiffr::expect_doppelganger("Plot prefs dots A 0.95", pl1)
vdiffr::manage_cases(".")
vdiffr::expect_doppelganger("Plot prefs dots A 0.95", pl1)
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
plot_preferences(s.1, node = "A", style = "dots",
type = "SES")
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
plot_preferences(s.1, node = "A", style = "dots",
type = "SES")
plot_preferences(s.1, node = "B", signif.level = 0.95,
style = "dots", type = "counts")
plot_preferences(s.1, node = "B", style = "dots",
type = "SES")
plot_preferences(s.1, node = "A", style = "bars",
type = "SES")
plot_preferences(s.1, node = "B", signif.level = 0.95,
style = "bars", type = "counts")
vdiffr::manage_cases(".")
via vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
library(nullnetr)
library(nullnetr)
# Traditional multi-level food web plot
PlotWebByLevel(BS, link.colour.by = "Test", link.colour.spec = c(Stronger =
"#d7191c", ns = "#cccccc", Weaker = "#2c7bb6"), link.lwd =
log(TLPS(BS)$Observed), pch = 16, cex = 3, col = "black",
highlight.nodes = NULL, show.nodes.as = "both", label.cex = 1,
label.colour = "white")
library(cheddar)
# Traditional multi-level food web plot
PlotWebByLevel(BS, link.colour.by = "Test", link.colour.spec = c(Stronger =
"#d7191c", ns = "#cccccc", Weaker = "#2c7bb6"), link.lwd =
log(TLPS(BS)$Observed), pch = 16, cex = 3, col = "black",
highlight.nodes = NULL, show.nodes.as = "both", label.cex = 1,
label.colour = "white")
# The Broadstone data comprise counts of different prey taxa in each individual predator's gut; hence data.type = "counts"
set.seed(1234)
bs.null <- generate_null_net(Broadstone, Broadstone.prey, sims = 100,
data.type = "counts", summary.type = "sum",
r.weights = Broadstone.fl)
library(cheddar)
# Create a list of properties, used for creating a cheddar 'Community' object
BS.props <- list(title = "Broadstone, August", M.units = "mg", N.units = "counts")
BS.links <- generate_edgelist(bs.null, signif.level = 0.95,
edge.cols = c("#2c7bb6", "#000000", "#d7191c"))
colnames(BS.links)[1:2] <- c("consumer", "resource") # Change to lower case to match cheddar
BS <- Community(nodes = Broadstone.nodes, properties = BS.props,
trophic.links = BS.links)
# Traditional multi-level food web plot
PlotWebByLevel(BS, link.colour.by = "Test", link.colour.spec = c(Stronger =
"#d7191c", ns = "#cccccc", Weaker = "#2c7bb6"), link.lwd =
log(TLPS(BS)$Observed), pch = 16, cex = 3, col = "black",
highlight.nodes = NULL, show.nodes.as = "both", label.cex = 1,
label.colour = "white")
#legend("topright", legend = c("Stronger", "ns", "Weaker"), lty = 1, lwd = 2,
#        col = c("#d7191c", "#cccccc", "#2c7bb6"))
# Traditional multi-level food web plot
PlotWebByLevel(BS, link.colour.by = "Test", link.colour.spec = c(Stronger =
"#d7191c", ns = "#cccccc", Weaker = "#2c7bb6"), link.lwd =
log(TLPS(BS)$Observed), pch = 16, cex = 3, col = "black",
highlight.nodes = NULL, show.nodes.as = "both", label.cex = 1,
label.colour = "white")
legend("topright", legend = c("Stronger", "ns", "Weaker"), lty = 1, lwd = 2,
col = c("#d7191c", "#cccccc", "#2c7bb6"))
plot_preferences(sil.null, "Sphaerophoria.scripta", signif.level = 0.95,
type = "counts", xlab = "Number of visits", p.cex = 2,
l.cex = 1, lwd = 2)
library(nullnetr)
set.seed(1234) # To create a reproducible example
sil.null <- generate_null_net(Silene[, 2:7], Silene.plants[, 2:6], sims = 100,
data.type = "names", summary.type = "sum",
c.samples = Silene[, 1],
r.samples = Silene.plants[, 1])
plot_preferences(sil.null, "Sphaerophoria.scripta", signif.level = 0.95,
type = "counts", xlab = "Number of visits", p.cex = 2,
l.cex = 1, lwd = 2)
# Create a data frame to assist with plotting
# trph.level = a simple trophic level: primary consumers = 1, predators = 2
n.names <- data.frame(species = V(net.1)$name, trph.level = c(1, 2, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 2, 1, 1))
library(igraph)
net.1 <- graph_from_edgelist(as.matrix(export1[, c("Resource", "Consumer")]),
directed = TRUE)
export1 <- generate_edgelist(stream.1, signif.level = 0.95,
edge.cols = c("#2c7bb6", "#000000", "#d7191c"))
set.seed(1234)
stream.1 <- generate_null_net(WelshStreams[, 2:18], WelshStreams.prey[, 2:17],
sims = 100, data.type = "names",
summary.type = "sum",
c.samples = WelshStreams[,1],
r.samples = WelshStreams.prey[,1],
r.weights = WelshStreams.fl)
par(mfrow = c(1, 2))
plot_preferences(stream.1, "Rhyacophila", signif.level = 0.95, type = "counts",
xlab = "Num. of prey detections", res.order =
WelshStreams.order, p.cex = 1.5, l.cex = 0.9, lwd = 2)
plot_preferences(stream.1, "Dinocras", signif.level = 0.95, type = "counts",
xlab = "Num. of prey detections", res.order =
WelshStreams.order, p.cex = 1.5, l.cex = 0.9, lwd = 2)
export1 <- generate_edgelist(stream.1, signif.level = 0.95,
edge.cols = c("#2c7bb6", "#000000", "#d7191c"))
library(igraph)
net.1 <- graph_from_edgelist(as.matrix(export1[, c("Resource", "Consumer")]),
directed = TRUE)
# Add in the null modelling results
E(net.1)$obs.str <- export1$Observed
E(net.1)$test.res <- export1$Test
E(net.1)$edge.cols <- export1$edge.col
plot(net.1, layout = layout_in_circle, edge.color = E(net.1)$edge.cols,
edge.width = sqrt(E(net.1)$obs.str))
# Create a data frame to assist with plotting
# trph.level = a simple trophic level: primary consumers = 1, predators = 2
n.names <- data.frame(species = V(net.1)$name, trph.level = c(1, 2, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 2, 1, 1))
# Calculate prey abundance across the six streams
abund <- as.matrix(colSums(WelshStreams.prey[, 2:17]) )
n.names <- merge(n.names, abund, by.x = "species", by.y = "row.names",
sort = FALSE)
colnames(n.names)[3] <- "Abundance"
# Specify x-coordinates for the nodes, based on their order in the Centre for Ecology and Hydrology's Coded Macroinvertebrate List, positions for the labels and abbreviated names for the nodes
n.names$x.coord <- c(1, 4.5, 3, 11, 14, 5, 2, 10, 7, 8, 12, 9, 4, 10.5, 13, 6)
n.names$lab.deg<-c(pi/2,-pi/2, pi/2, pi/2, pi/2, pi/2, pi/2, pi/2, pi/2, pi/2,
pi/2, pi/2, pi/2, -pi/2, pi/2, pi/2)
n.names$short.names <- strtrim(n.names$species, 4)
n.names$short.names[2] <- "Dinocras"
n.names$short.names[14] <- "Rhyacophila"
# Create curved edges between Dinocras & Rhyacophila so that predation in both directions can be shown clearly.
E(net.1)[13] # Confirms that edge 13 = Rhyacophila to Dinocras
E(net.1)[18] # Confirms that edge 18 = Dinocras to Rhyacophila
curve.edge <- rep(0, ecount(net.1))
curve.edge[c(13, 18)] <- 0.5
curve.arrows <- rep(0, ecount(net.1))
curve.arrows[c(13, 18)] <- 2
name.pos <- c(1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1)
# Create the food web plot
plot(net.1, layout = as.matrix(n.names[, c("x.coord", "trph.level")]),
vertex.shape = "rectangle", vertex.size = log(n.names$Abundance),
vertex.size2 = 20, edge.curved = curve.edge, edge.arrow.mode = curve.arrows,
edge.color = E(net.1)$edge.cols, edge.width = sqrt(E(net.1)$obs.str),
vertex.color = "#000000", vertex.label = n.names$short.names,
vertex.label.degree = n.names$lab.deg, vertex.label.family = "",
vertex.label.dist = name.pos, vertex.label.cex = 0.75, asp = .4)
# Create a data frame to assist with plotting
# trph.level = a simple trophic level: primary consumers = 1, predators = 2
n.names <- data.frame(species = V(net.1)$name, trph.level = c(1, 2, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 2, 1, 1))
# Calculate prey abundance across the six streams
abund <- as.matrix(colSums(WelshStreams.prey[, 2:17]) )
n.names <- merge(n.names, abund, by.x = "species", by.y = "row.names",
sort = FALSE)
colnames(n.names)[3] <- "Abundance"
# Specify x-coordinates for the nodes, based on their order in the Centre for Ecology and Hydrology's Coded Macroinvertebrate List, positions for the labels and abbreviated names for the nodes
n.names$x.coord <- c(1, 4.5, 3, 11, 14, 5, 2, 10, 7, 8, 12, 9, 4, 10.5, 13, 6)
n.names$lab.deg<-c(pi/2,-pi/2, pi/2, pi/2, pi/2, pi/2, pi/2, pi/2, pi/2, pi/2,
pi/2, pi/2, pi/2, -pi/2, pi/2, pi/2)
n.names$short.names <- strtrim(n.names$species, 4)
n.names$short.names[2] <- "Dinocras"
n.names$short.names[14] <- "Rhyacophila"
# Create curved edges between Dinocras & Rhyacophila so that predation in both directions can be shown clearly.
E(net.1)[13] # Confirms that edge 13 = Rhyacophila to Dinocras
E(net.1)[18] # Confirms that edge 18 = Dinocras to Rhyacophila
curve.edge <- rep(0, ecount(net.1))
curve.edge[c(13, 18)] <- 0.5
curve.arrows <- rep(0, ecount(net.1))
curve.arrows[c(13, 18)] <- 2
#name.pos <- c(1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1)
name.pos <- c(2, 2, 4, 4, 4, 4, 4, 2, 4, 4, 2, 2, 2, 2, 2, 2)
# Create the food web plot
plot(net.1, layout = as.matrix(n.names[, c("x.coord", "trph.level")]),
vertex.shape = "rectangle", vertex.size = log(n.names$Abundance),
vertex.size2 = 20, edge.curved = curve.edge, edge.arrow.mode = curve.arrows,
edge.color = E(net.1)$edge.cols, edge.width = sqrt(E(net.1)$obs.str),
vertex.color = "#000000", vertex.label = n.names$short.names,
vertex.label.degree = n.names$lab.deg, vertex.label.family = "",
vertex.label.dist = name.pos, vertex.label.cex = 0.75, asp = .4)
# Create a data frame to assist with plotting
# trph.level = a simple trophic level: primary consumers = 1, predators = 2
n.names <- data.frame(species = V(net.1)$name, trph.level = c(1, 2, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 2, 1, 1))
# Calculate prey abundance across the six streams
abund <- as.matrix(colSums(WelshStreams.prey[, 2:17]) )
n.names <- merge(n.names, abund, by.x = "species", by.y = "row.names",
sort = FALSE)
colnames(n.names)[3] <- "Abundance"
# Specify x-coordinates for the nodes, based on their order in the Centre for Ecology and Hydrology's Coded Macroinvertebrate List, positions for the labels and abbreviated names for the nodes
n.names$x.coord <- c(1, 4.5, 3, 11, 14, 5, 2, 10, 7, 8, 12, 9, 4, 10.5, 13, 6)
n.names$lab.deg<-c(pi/2,-pi/2, pi/2, pi/2, pi/2, pi/2, pi/2, pi/2, pi/2, pi/2,
pi/2, pi/2, pi/2, -pi/2, pi/2, pi/2)
n.names$short.names <- strtrim(n.names$species, 4)
n.names$short.names[2] <- "Dinocras"
n.names$short.names[14] <- "Rhyacophila"
# Create curved edges between Dinocras & Rhyacophila so that predation in both directions can be shown clearly.
E(net.1)[13] # Confirms that edge 13 = Rhyacophila to Dinocras
E(net.1)[18] # Confirms that edge 18 = Dinocras to Rhyacophila
curve.edge <- rep(0, ecount(net.1))
curve.edge[c(13, 18)] <- 0.5
curve.arrows <- rep(0, ecount(net.1))
curve.arrows[c(13, 18)] <- 2
#name.pos <- c(1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1)
name.pos <- c(2, 2, 4, 4, 4, 4, 4, 2, 4, 4, 2, 2, 2, 2, 2, 2)
# Create the food web plot
plot(net.1, layout = as.matrix(n.names[, c("x.coord", "trph.level")]),
vertex.shape = "rectangle", vertex.size = log(n.names$Abundance),
vertex.size2 = 20, edge.curved = curve.edge, edge.arrow.mode = curve.arrows,
edge.color = E(net.1)$edge.cols, edge.width = sqrt(E(net.1)$obs.str),
vertex.color = "#000000", vertex.label = n.names$short.names,
vertex.label.degree = n.names$lab.deg, vertex.label.family = "",
#vertex.label.dist = name.pos, vertex.label.cex = 0.75, asp = .4)
vertex.label.dist = rep(3, 16), vertex.label.cex = 0.75, asp = .4)
plot_preferences(stream.1, "Dinocras")
plot_preferences(stream.1, "Dinocras", style = "bars")
plot_preferences(stream.1, "Dinocras", style = "bars", lwd = 4)
library(nullnetr)
plot_preferences(stream.1, "Dinocras")
plot_preferences(stream.1, "Dinocras", lwd = 2)
plot_preferences(stream.1, "Dinocras", lwd = 2, p.cex = 2)
test_interactions(stream.1)
vdiffr::manage_cases(".")
?par
par("cex")
