colnames(res.order) <- c("Taxon", "Order")
ti <- merge(ti, res.order, by.x = "Resource", by.y = "Taxon")
ti <- ti[order(ti$Order, decreasing = FALSE), ]
graphics::dotchart(ti$Setup, labels = ti$Resource, col = 1,
pt.cex = 0, cex = l.cex, main = node, ...)
graphics::abline(v = 0, lty = 2, col = "dimgrey")
for (i in 1:nrow(ti)){
eval(parse(text = paste("lines(x = c(ti$Lower.", signif.level * 100,
".CL[i], ti$Upper.", signif.level * 100,
".CL[i]), y = c(i, i), lwd = lwd)", sep = "")))
if(ti$Test[i] == "Weaker") p.col <- res.col[1]
if(ti$Test[i] == "ns" | is.na(ti$Test[i])) p.col <- res.col[2]
if(ti$Test[i] == "Stronger") p.col <- res.col[3]
graphics::points(ti$Observed[i], i, pch = 21, col = "black",
bg = p.col, cex = p.cex)
}
}
}
# --------------------------------------
# --------------------------------------
# Plot type 2: Standardised effect sizes with 2 and -2 lines
if(type == "SES") {
# Set up maximum x-axis value for xlim. Add an additional 5%
min.x <- min(ti$SES, na.rm = TRUE)
max.x <- max(ti$SES, na.rm = TRUE)
ran.x <- max(ti$SES, na.rm = TRUE) - min(ti$SES, na.rm = TRUE)
min.x <- min(min.x - (ran.x * 0.05), 0)
max.x <- max.x + (ran.x * 0.05)
ti$Setup <- seq(min.x, max.x, length.out = nrow(ti))
if (is.null(res.order)) {
graphics::dotchart(ti$Setup, labels = ti$Resource, col = 0, ...)
graphics::dotchart(ti$SES, labels = ti$Resource, pch = 16,
col = 1, pt.cex = .1, cex = l.cex, ...)
graphics::abline(v = 2, lty = 2)
graphics::abline(v = 0, lty = 1)
graphics::abline(v = -2, lty = 2)
for (i in 1:nrow(ti)){
if(ti$Test[i] == "Weaker") p.col <- res.col[1]
if(ti$Test[i] == "ns" | is.na(ti$Test[i])) p.col <- res.col[2]
if(ti$Test[i] == "Stronger") p.col <- res.col[3]
graphics::points(ti$SES[i], i, pch = 21, col = "black",
bg = p.col, cex = p.cex)
}
} else {
colnames(res.order) <- c("Taxon", "Order")
ti <- merge(ti, res.order, by.x = "Resource", by.y = "Taxon")
ti <- ti[order(ti$Order, decreasing = FALSE), ]
graphics::dotchart(ti$Setup, labels = ti$Resource, col = 0, ...)
graphics::dotchart(ti$SES, labels = ti$Resource, pch = 16,
col = 1, pt.cex = .1, xlim = c(min.x, max.x), ...)
graphics::abline(v = 2, lty = 2)
graphics::abline(v = 0, lty = 1)
graphics::abline(v = -2, lty = 2)
for (i in 1:nrow(ti)){
if(ti$Test[i] == "Weaker") p.col <- res.col[1]
if(ti$Test[i] == "ns" | is.na(ti$Test[i])) p.col <- res.col[2]
if(ti$Test[i] == "Stronger") p.col <- res.col[3]
graphics::points(ti$SES[i], i, pch = 21, col = "black",
bg = p.col, cex = p.cex)
}
}
}
}
# --------------------------------------
# Plot style 2: barchart
# --------------------------------------
if(style == "bars") {
# Vector of fill colours for the bars.
if(!is.null(res.col)) {
ti$Prefs <- rep(res.col[2], nrow(ti))
for (i in 1:nrow(ti)) {
if (ti$Test[i] == "Stronger") {ti$Prefs[i] <- res.col[3]}
if (ti$Test[i] == "Weaker") {ti$Prefs[i] <- res.col[1] }
}
} else {
ti$Prefs <- rep(0, nrow(ti))
}
# Counts with confidence limits
if(type == "counts") {
# Set up maximum y-axis value for ylim. Add an additional 5%
min.y <- min(ti[, 3:6], na.rm = TRUE)
min.y <- max(0, min.y, na.rm = TRUE)
max.y <- max(ti[, 3:6], na.rm = TRUE)
max.y <- max.y * 1.05
ti$Setup <- seq(min.y, max.y, length.out = nrow(ti))
if (is.null(res.order)) {
# Plot built up in 3 stages: i) uses min and max values to set the
#   y-axis range without having to use ylim (so this can be customised
#   by the user), ii) the main barplot and label, and iii) the error
#   bars using arrows. Warnings surpressed for arrows: warnings are
#   generated when they are of 'zero length' i.e. no confidence interval
bp1 <- graphics::barplot(ti$Setup, names.arg = ti$Resource,
col = 0, border = NA, axisnames = FALSE, ...)
graphics::barplot(ti$Observed, names.arg = ti$Resource, las = 3,
main = node, col = ti$Prefs, add = TRUE, ...)
arrow.cols <- ifelse((ti[, 5] - ti[, 6]) == 0, NA, "black")
graphics::arrows(bp1, ti[, 5], bp1, ti[, 6], lwd = 2,
col = arrow.cols, code = 3, angle = 90, length = .05)
} else {
colnames(res.order) <- c("Taxon", "Order")
ti <- merge(ti, res.order, by.x = "Resource", by.y = "Taxon")
ti <- ti[order(ti$Order, decreasing = FALSE), ]
bp1 <- graphics::barplot(ti$Setup, names.arg = ti$Resource,
col = 0, border = NA, axisnames = FALSE, ...)
graphics::barplot(ti$Observed, names.arg = ti$Resource,
las = 3, main = node, col = ti$Prefs, add = TRUE, ...)
arrow.cols <- ifelse((ti[, 5] - ti[, 6]) == 0, NA, "black")
graphics::arrows(bp1, ti[, 5], bp1, ti[, 6], lwd = 2,
col = arrow.cols, code = 3, angle = 90, length = .05)
}
}
# --------------------------------------
# --------------------------------------
# Plot type 2: Standardised effect sizes with 2 and -2 lines
if(type == "SES") {
min.y <- min(ti$SES, na.rm = TRUE)
max.y <- max(ti$SES, na.rm = TRUE)
ran.y <- max(ti$SES, na.rm = TRUE) - min(ti$SES, na.rm = TRUE)
min.y <- min(min.y - (ran.y * 0.05), 0)
max.y <- max.y + (ran.y * 0.05)
ti$Setup <- seq(min.y, max.y, length.out = nrow(ti))
if (is.null(res.order)) {
bp1 <- graphics::barplot(ti$Setup, names.arg = ti$Resource, col = 0,
border = NA, axisnames = FALSE, ...)
graphics::barplot(ti$SES, names.arg = ti$Resource, las = 3,
add = TRUE, main = node, col = ti$Prefs, ...)
graphics::abline(h = 2, lty = 2)
graphics::abline(h = -2, lty = 2)
} else {
colnames(res.order) <- c("Taxon", "Order")
ti <- merge(ti, res.order, by.x = "Resource", by.y = "Taxon")
ti <- ti[order(ti$Order, decreasing = FALSE), ]
bp1 <- graphics::barplot(ti$Setup, names.arg = ti$Resource, col = 0,
border = NA, axisnames = FALSE, ...)
graphics::barplot(ti$SES, names.arg = ti$Resource, las = 3, add = TRUE,
main = node, col = ti$Prefs, ...)
graphics::abline(h = 2, lty = 2)
graphics::abline(h = 0, lty = 1)
graphics::abline(h = -2, lty = 2)
}
}
}
}
plot_preferences2(b1, node = "Dinocras")
plot_preferences2(b1, node = "Dinocras", l.cex = .5)
plot_preferences2(b1, node = "Dinocras", l.cex = .5, p.cex = 1.5)
plot_preferences2(b1, node = "Dinocras", l.cex = .5, p.cex = 1.5, lwd  =4)
plot_preferences2(b1, node = "Dinocras", l.cex = .5, p.cex = 1.5, lwd  =4, lcolor = "black")
plot_preferences2(b1, node = "Dinocras", style = "bars", l.cex = .5, p.cex = 1.5, lwd  =4)
plot_preferences2(b1, node = "Dinocras", style = "bars")
plot_preferences2(b1, node = "Dinocras", style = "bars", cex = 2)
?barplot
plot_preferences2(b1, node = "Dinocras", style = "bars", cex.names = 2)
library(readr)
?dotchart
?par
par(mar = c(9, 4, 4, 2) + 0.1, mfrow = c(2,1))
plot_preferences(null.1, "Dinocras", signif.level = 0.95,
type = "counts", ylab = "Num. of visits")
null.1 <- generate_null_net(WelshStreams[, 2:18], WelshStreams.prey[, 2:17],
sims = 10, c.samples = WelshStreams[, 1],
r.samples = WelshStreams.prey[, 1])
par(mar = c(9, 4, 4, 2) + 0.1, mfrow = c(2,1))
plot_preferences(null.1, "Dinocras", signif.level = 0.95,
type = "counts", ylab = "Num. of visits")
par(mar = c(9, 4, 4, 2) + 0.1)
plot_preferences(null.1, "Dinocras", signif.level = 0.95,
type = "counts", ylab = "Num. of visits")
plot_preferences(null.1, "Dinocras", signif.level = 0.95,
type = "counts", ylab = "Num. of visits")
plot_preferences(null.1, "Dinocras", signif.level = 0.95,
type = "counts", ylab = "Num. of visits")
plot_preferences <- function(nullnet, node, signif.level = 0.95,
style = "dots", type = "counts",
res.col = c("#67A9CF", "#F7F7F7", "#EF8A62"),
res.order = NULL, lwd = 1.5,
l.cex = par("cex"), p.cex = par("cex"), ...) {
##### ADD TIBBLE HANDLING HERE ######
## RES ORDER
# --------------------------------------
# Set significance level
if (signif.level <= 0 || signif.level >= 1) {
stop("Invalid percentile value specified")}
# --------------------------------------
# --------------------------------------
# Initial error handling:
# 1. Return an error if a object from 'generate_null_net' is not supplied
if(class(nullnet) != "nullnet") {
stop("plot_preferences requires a nullnet object")}
# 2. type <> "counts" or "SES", or style <> "dots" or "bars"
if(type != "counts" && type != "SES") {
stop("Invalid bar type specified")}
if(style != "dots" && style != "bars") {
stop("Invalid style of plot")}
# 3. If a 'res.order' variable is specified, check that names match those
#    in the nullnet object
if (!is.null(res.order)) {
if(!identical(sort(colnames(nullnet$rand.data[, 3:ncol(nullnet$rand.data)])),
as.character(sort(res.order[, 1])) )) {
stop("Names in 'res.order' do not match resource names in nullnet object")}
}
# --------------------------------------
# --------------------------------------
# Call test_interactions
ti <- test_interactions(nullnet, signif.level = signif.level)
ti <- ti[ti$Consumer == node, ]
ti[, 3] <- ifelse(rowSums(ti[, 3:6]) == 0, NA, ti[, 3])
ti[, 4] <- ifelse(rowSums(ti[, 3:6]) == 0, NA, ti[, 4])
ti[, 5] <- ifelse(rowSums(ti[, 3:6]) == 0, NA, ti[, 5])
ti[, 6] <- ifelse(rowSums(ti[, 3:6]) == 0, NA, ti[, 6])
# --------------------------------------
# --------------------------------------
# Plot style 1: dotchart
# --------------------------------------
if(style == "dots") {
# Counts with confidence limits
if(type == "counts") {
# Set up maximum x-axis value for xlim. Add an additional 5%
min.x <- min(ti[, 3:6], na.rm = TRUE)
min.x <- max(0, min.x, na.rm = TRUE)
max.x <- max(ti[, 3:6], na.rm = TRUE)
max.x <- max.x * 1.05
ti$Setup <- seq(min.x, max.x, length.out = nrow(ti))
if (is.null(res.order)) {
# Plot built up in 2 stages: i) using min and max values to set the
#   y-axis range without having to use ylim (so this can be customised
#   by the user), ii) the main dbarplot and label, and iii) the error
graphics::dotchart(ti$Setup, labels = ti$Resource, col = 1,
pt.cex = 0, cex = l.cex, main = node, ...)
graphics::abline(v = 0, lty = 2, col = "dimgrey")
for (i in 1:nrow(ti)){
eval(parse(text = paste("lines(x = c(ti$Lower.", signif.level * 100,
".CL[i], ti$Upper.", signif.level * 100,
".CL[i]), y = c(i, i), lwd = lwd)", sep = "")))
if(ti$Test[i] == "Weaker") p.col <- res.col[1]
if(ti$Test[i] == "ns" | is.na(ti$Test[i])) p.col <- res.col[2]
if(ti$Test[i] == "Stronger") p.col <- res.col[3]
graphics::points(ti$Observed[i], i, pch = 21, col = "black",
bg = p.col, cex = p.cex)
}
} else {
colnames(res.order) <- c("Taxon", "Order")
ti <- merge(ti, res.order, by.x = "Resource", by.y = "Taxon")
ti <- ti[order(ti$Order, decreasing = FALSE), ]
graphics::dotchart(ti$Setup, labels = ti$Resource, col = 1,
pt.cex = 0, cex = l.cex, main = node, ...)
graphics::abline(v = 0, lty = 2, col = "dimgrey")
for (i in 1:nrow(ti)){
eval(parse(text = paste("lines(x = c(ti$Lower.", signif.level * 100,
".CL[i], ti$Upper.", signif.level * 100,
".CL[i]), y = c(i, i), lwd = lwd)", sep = "")))
if(ti$Test[i] == "Weaker") p.col <- res.col[1]
if(ti$Test[i] == "ns" | is.na(ti$Test[i])) p.col <- res.col[2]
if(ti$Test[i] == "Stronger") p.col <- res.col[3]
graphics::points(ti$Observed[i], i, pch = 21, col = "black",
bg = p.col, cex = p.cex)
}
}
}
# --------------------------------------
# --------------------------------------
# Plot type 2: Standardised effect sizes with 2 and -2 lines
if(type == "SES") {
# Set up maximum x-axis value for xlim. Add an additional 5%
min.x <- min(ti$SES, na.rm = TRUE)
max.x <- max(ti$SES, na.rm = TRUE)
ran.x <- max(ti$SES, na.rm = TRUE) - min(ti$SES, na.rm = TRUE)
min.x <- min(min.x - (ran.x * 0.05), 0)
max.x <- max.x + (ran.x * 0.05)
ti$Setup <- seq(min.x, max.x, length.out = nrow(ti))
if (is.null(res.order)) {
graphics::dotchart(ti$Setup, labels = ti$Resource, col = 0, ...)
graphics::dotchart(ti$SES, labels = ti$Resource, pch = 16,
col = 1, pt.cex = .1, cex = l.cex, ...)
graphics::abline(v = 2, lty = 2)
graphics::abline(v = 0, lty = 1)
graphics::abline(v = -2, lty = 2)
for (i in 1:nrow(ti)){
if(ti$Test[i] == "Weaker") p.col <- res.col[1]
if(ti$Test[i] == "ns" | is.na(ti$Test[i])) p.col <- res.col[2]
if(ti$Test[i] == "Stronger") p.col <- res.col[3]
graphics::points(ti$SES[i], i, pch = 21, col = "black",
bg = p.col, cex = p.cex)
}
} else {
colnames(res.order) <- c("Taxon", "Order")
ti <- merge(ti, res.order, by.x = "Resource", by.y = "Taxon")
ti <- ti[order(ti$Order, decreasing = FALSE), ]
graphics::dotchart(ti$Setup, labels = ti$Resource, col = 0, ...)
graphics::dotchart(ti$SES, labels = ti$Resource, pch = 16,
col = 1, pt.cex = .1, xlim = c(min.x, max.x), ...)
graphics::abline(v = 2, lty = 2)
graphics::abline(v = 0, lty = 1)
graphics::abline(v = -2, lty = 2)
for (i in 1:nrow(ti)){
if(ti$Test[i] == "Weaker") p.col <- res.col[1]
if(ti$Test[i] == "ns" | is.na(ti$Test[i])) p.col <- res.col[2]
if(ti$Test[i] == "Stronger") p.col <- res.col[3]
graphics::points(ti$SES[i], i, pch = 21, col = "black",
bg = p.col, cex = p.cex)
}
}
}
}
# --------------------------------------
# Plot style 2: barchart
# --------------------------------------
if(style == "bars") {
# Vector of fill colours for the bars.
if(!is.null(res.col)) {
ti$Prefs <- rep(res.col[2], nrow(ti))
for (i in 1:nrow(ti)) {
if (ti$Test[i] == "Stronger") {ti$Prefs[i] <- res.col[3]}
if (ti$Test[i] == "Weaker") {ti$Prefs[i] <- res.col[1] }
}
} else {
ti$Prefs <- rep(0, nrow(ti))
}
# Counts with confidence limits
if(type == "counts") {
# Set up maximum y-axis value for ylim. Add an additional 5%
min.y <- min(ti[, 3:6], na.rm = TRUE)
min.y <- max(0, min.y, na.rm = TRUE)
max.y <- max(ti[, 3:6], na.rm = TRUE)
max.y <- max.y * 1.05
ti$Setup <- seq(min.y, max.y, length.out = nrow(ti))
if (is.null(res.order)) {
# Plot built up in 3 stages: i) uses min and max values to set the
#   y-axis range without having to use ylim (so this can be customised
#   by the user), ii) the main barplot and label, and iii) the error
#   bars using arrows. Warnings surpressed for arrows: warnings are
#   generated when they are of 'zero length' i.e. no confidence interval
bp1 <- graphics::barplot(ti$Setup, names.arg = ti$Resource,
col = 0, border = NA, axisnames = FALSE, ...)
graphics::barplot(ti$Observed, names.arg = ti$Resource, las = 3,
main = node, col = ti$Prefs, add = TRUE, ...)
arrow.cols <- ifelse((ti[, 5] - ti[, 6]) == 0, NA, "black")
graphics::arrows(bp1, ti[, 5], bp1, ti[, 6], lwd = 2,
col = arrow.cols, code = 3, angle = 90, length = .05)
} else {
colnames(res.order) <- c("Taxon", "Order")
ti <- merge(ti, res.order, by.x = "Resource", by.y = "Taxon")
ti <- ti[order(ti$Order, decreasing = FALSE), ]
bp1 <- graphics::barplot(ti$Setup, names.arg = ti$Resource,
col = 0, border = NA, axisnames = FALSE, ...)
graphics::barplot(ti$Observed, names.arg = ti$Resource,
las = 3, main = node, col = ti$Prefs, add = TRUE, ...)
arrow.cols <- ifelse((ti[, 5] - ti[, 6]) == 0, NA, "black")
graphics::arrows(bp1, ti[, 5], bp1, ti[, 6], lwd = 2,
col = arrow.cols, code = 3, angle = 90, length = .05)
}
}
# --------------------------------------
# --------------------------------------
# Plot type 2: Standardised effect sizes with 2 and -2 lines
if(type == "SES") {
min.y <- min(ti$SES, na.rm = TRUE)
max.y <- max(ti$SES, na.rm = TRUE)
ran.y <- max(ti$SES, na.rm = TRUE) - min(ti$SES, na.rm = TRUE)
min.y <- min(min.y - (ran.y * 0.05), 0)
max.y <- max.y + (ran.y * 0.05)
ti$Setup <- seq(min.y, max.y, length.out = nrow(ti))
if (is.null(res.order)) {
bp1 <- graphics::barplot(ti$Setup, names.arg = ti$Resource, col = 0,
border = NA, axisnames = FALSE, ...)
graphics::barplot(ti$SES, names.arg = ti$Resource, las = 3,
add = TRUE, main = node, col = ti$Prefs, ...)
graphics::abline(h = 2, lty = 2)
graphics::abline(h = -2, lty = 2)
} else {
colnames(res.order) <- c("Taxon", "Order")
ti <- merge(ti, res.order, by.x = "Resource", by.y = "Taxon")
ti <- ti[order(ti$Order, decreasing = FALSE), ]
bp1 <- graphics::barplot(ti$Setup, names.arg = ti$Resource, col = 0,
border = NA, axisnames = FALSE, ...)
graphics::barplot(ti$SES, names.arg = ti$Resource, las = 3, add = TRUE,
main = node, col = ti$Prefs, ...)
graphics::abline(h = 2, lty = 2)
graphics::abline(h = 0, lty = 1)
graphics::abline(h = -2, lty = 2)
}
}
}
}
warnings()
plot_preferences(null.1, "Dinocras", signif.level = 0.95,
type = "counts", ylab = "Num. of visits")
plot_preferences(null.1, "Dinocras", signif.level = 0.95,
type = "counts", xlab = "Num. of visits")
plot_preferences(null.1, "Dinocras", signif.level = 0.95, type = "counts",
xlab = "Num. of visits", lwd = 2)
plot_preferences(null.1, "Dinocras", signif.level = 0.95, type = "counts",
xlab = "Num. of visits", p.cex = 1.2, lwd = 2)
plot_preferences(null.1, "Rhyacophila", signif.level = 0.95,
type = "SES", xlab = "SES")
plot_preferences(null.1, "Rhyacophila", signif.level = 0.95, style = "bars",
bar.type = "SES", ylab = "SES")
plot_preferences(null.1, "Rhyacophila", signif.level = 0.95, style = "bars",
type = "SES", ylab = "SES")
plot_preferences(null.1, "Rhyacophila", signif.level = 0.95, style = "bars",
type = "SES", ylab = "SES")
library(readr)
cons <- read_csv("C:/R/df1_cons_q.csv")
class(cons)
summary(cons)
library(nullnetr)
?plot_preferences
devtools::load_all(".")
?plot_preferences
library(nullnetr)
?plot_preferences
library(nullnetr)
library(nullnetr)
?plot_preferences
library(nullnetr)
library(nullnetr)
?plot_preferences
null.1 <- generate_null_net(WelshStreams[, 2:18], WelshStreams.prey[, 2:17],
sims = 10, c.samples = WelshStreams[, 1],
r.samples = WelshStreams.prey[, 1])
plot_preferences(null.1, "Dinocras", signif.level = 0.95, type = "counts",
xlab = "Num. of visits", p.cex = 1.2, lwd = 2)
plot_preferences(null.1, "Dinocras", style = "bars", signif.level = 0.95,
type = "counts", xlab = "Num. of visits")
plot_preferences(null.1, "Dinocras", signif.level = 0.95, type = "counts",
xlab = "Num. of visits", p.cex = 1.2, lwd = 2)
plot_preferences(null.1, "Rhyacophila", signif.level = 0.95,
type = "SES", xlab = "SES")
plot_preferences(null.1, "Rhyacophila", signif.level = 0.95, style = "bars",
type = "SES", ylab = "SES")
library(nullnetr)
library(nullnetr)
null.1 <- generate_null_net(Silene[, 2:7], Silene.plants[, 2:6], sims = 10,
data.type = "names", summary.type = "sum", c.samples = Silene[, 1],
r.samples = Silene.plants[, 1])
library(nullnetr)
vdiffr::manage_cases(".")
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
plot_preferences(s.1, node = "A", signif.level = 0.95,
style = "dots", type = "counts")
plot_preferences(s.1, node = "B", signif.level = 0.95,
style = "dots", type = "counts")
plot_preferences(s.1, node = "A", style = "dots",
type = "SES")
plot_preferences(s.1, node = "B", style = "dots",
type = "SES")
plot_preferences(s.1, node = "A", signif.level = 0.95,
style = "bars", type = "counts")
plot_preferences(s.1, node = "B", signif.level = 0.95,
style = "bars", type = "counts")
plot_preferences(s.1, node = "A", style = "bars",
type = "SES")
plot_preferences(s.1, node = "B", style = "bars",
type = "SES")
plot_preferences(s.1, node = "A", style = "dots",
type = "SES")
s.1 <- list()
s.1$obs.interactions <- read.csv(system.file("testdata", "obs_data.csv",
package = "nullnetr"))
s.1$rand.data <- read.csv(system.file("testdata", "sim_data.csv",
package = "nullnetr"))
s.1$n.iterations <- 100
class(s.1) <- "nullnet"
ro <- read.csv(system.file("testdata", "df1_res_order.csv", package = "nullnetr"))
ro.err1 <- read.csv(system.file("testdata", "df1_res_order_error.csv",
package = "nullnetr"))
plot_preferences(s.1, node = "A", style = "dots",
type = "SES")
library(nullnetr)
plot_preferences(s.1, node = "A", style = "dots",
type = "SES")
vdiffr::manage_cases(".")
plot_preferences(s.1, node = "A", signif.level = 1.1)
plot_preferences(s.1, node = "A", type = "height")
plot_preferences(s.1, node = "A", res.order = ro[-1, ])
plot_preferences(s.1, node = "A", res.order = ro.err1)
vdiffr::expect_doppelganger("Plot prefs dots A 0.95", pl1)
pl1 <- function() plot_preferences(s.1, node = "A", signif.level = 0.95,
style = "dots", type = "counts")
vdiffr::expect_doppelganger("Plot prefs dots A 0.95", pl1)
vdiffr::manage_cases(".")
vdiffr::expect_doppelganger("Plot prefs dots A 0.95", pl1)
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
plot_preferences(s.1, node = "A", style = "dots",
type = "SES")
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
plot_preferences(s.1, node = "A", style = "dots",
type = "SES")
plot_preferences(s.1, node = "B", signif.level = 0.95,
style = "dots", type = "counts")
plot_preferences(s.1, node = "B", style = "dots",
type = "SES")
plot_preferences(s.1, node = "A", style = "bars",
type = "SES")
plot_preferences(s.1, node = "B", signif.level = 0.95,
style = "bars", type = "counts")
vdiffr::manage_cases(".")
via vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
vdiffr::manage_cases(".")
library(nullnetr)
